model{
  ##
  ## measurement model for observations
  ##
  
  ## 
  ## precision
  ##
  
  intercept_lfs ~ dnorm(0.5, 1)I(0,)
  slope_lfs ~ dnorm(0.00275, 1e4)
  
  tau_eurostat ~ dnorm(1111, 0.01)I(0.001,)
  tau_fbmau ~ dnorm(50, 0.01)I(0.001,)
  tau_fbdau ~ dnorm(100, 0.001)I(0.001,)
  tau_census ~ dnorm(5000,0.01)I(0.001,)

   
  # stocks
  for(i in 1:N){
  	 eurostat[i] ~ dnorm(y1[i] + log(gamma_eurostat[cov_eurostat_gr_yr[i]]), tau_eurostat)
  	 }
  
  for(i in incensus){
  census[i] ~ dnorm(y1[i] + log(gamma_census), tau_census)
  }
  
  for(i in infbmau2016){
    fbmau[i] ~ dnorm(y1[i] + log(gamma_fbmau_2016[cov_mau_gr[i]]), tau_fbmau)
    }
  
  for(i in infbmau2017){
    fbmau[i] ~ dnorm(y1[i] + log(gamma_fbmau_2017[cov_mau_gr[i]]), tau_fbmau)
    }
  
  for(i in infbmau2018){
    fbmau_censored_ind[i] ~ dinterval(fbmau_censored[i], 1000)
    fbmau_censored[i] ~ dnorm(fbmau_hat[i], tau_fbmau)
    fbmau_hat[i] <- y1[i] + log(gamma_fbmau_2018[cov_mau_gr[i]])
    }
  for(i in infbmau2019){
    fbmau_censored_ind[i] ~ dinterval(fbmau_censored[i], 1000)
    fbmau_censored[i] ~ dnorm(fbmau_hat[i], tau_fbmau)
    fbmau_hat[i] <- y1[i] + log(gamma_fbmau_2019[cov_mau_gr[i]]) + log(kappa_fbmau_2019[i])
    }

	
  for(i in infbdau2018){
    fbdau[i] ~ dnorm(y1[i] + log(gamma_fbdau_2018[cov_dau_gr[i]]), tau_fbdau)
   }
    
  for(i in infbdau2019){
   fbdau[i] ~ dnorm(y1[i] + log(gamma_fbdau_2019[cov_dau_gr[i]]) + log(kappa_fbdau_2019[i]), tau_fbdau)
  }
  
  for(i in inlfs){
    lfs[i] ~ dnorm(y1[i] + log(gamma_lfs[cov_lfs_dest_year[i]]), tau_lfs[i])
    tau_lfs[i] <- intercept_lfs + slope_lfs * lfs2[i]
    }
  

  ##
  ## migration model for process
  ##
  # inital periods
  for(i in 1:n){
    y1[i] ~ dnorm(beta1[corridor[i]], tau_y1) # change to another parameter
    }
  
  # stock
  for(i in (n + 1):N){ 
    y1[i] ~ dnorm(y1[i-n] + w, tau_y1)
  

    }
  
  ##
  ## priors
  ##
 
  # model process error, like state space
  tau_y1 <- pow(sigma_y1, -2)
  sigma_y1 ~ dnorm(0,1)I(0.00001,) #prec 0.01
  
  w ~ dnorm(0,0.5)

  
 # model process 
  for(i in 1:n){
    beta[1:2, i] ~ dmnorm(mu_beta[1:2], tau_beta[1:2,1:2]) 
    beta1[i] ~ dnorm(mu_beta1, tau_beta1)
    }
  
  
  mu_beta[1:2] ~ dmnorm(mu_betaP[1:2], tau_betaP[1:2,1:2])

  mu_beta1 ~ dnorm(10, 1)
  mu_betaP[1] <- 10
  mu_betaP[2] <- 0
  
  
  tau_beta[1,1] <- tau_beta2
  tau_beta[2,2] <- tau_beta3
  tau_beta[1,2] <- 0 
  tau_beta[2,1] <- 0 
  tau_beta1 <- pow(sigma_beta1, -2)
  tau_beta2 <- pow(sigma_beta2, -2)
  tau_beta3 <- pow(sigma_beta3, -2)

  tau_betaP[1,1] <- 1
  tau_betaP[1,2] <- 0
  tau_betaP[2,1] <- 0
  tau_betaP[2,2] <- 1
  
  sigma_beta1 ~ dnorm(0, 1)I(0.00001,)
  sigma_beta2 ~ dnorm(0, 1)I(0.00001,)
  sigma_beta3 ~ dnorm(0, 1)I(0.00001,)

  
  # non-sampling error
  for(i in 1:17){
  gamma_eurostat[i] ~ dnorm(1, 100)I(0,)
  }
  
  for(i in 1:56){
  gamma_lfs[i] ~ dnorm(1,0.01)I(0,)
  }
  
  gamma_census ~ dnorm(1,100)I(0,1)
  
  # grouped facebook coverage
  # group by year and cov_gr and use the mean value
  gamma_fbmau_2016[1] ~ dnorm(0.35, 100)I(0.001,1)
  gamma_fbmau_2016[2] ~ dnorm(0.50, 100)I(0.001,1)
  gamma_fbmau_2016[3] ~ dnorm(0.60, 100)I(0.001,)
  gamma_fbmau_2016[4] ~ dnorm(0.85, 100)I(0.001,)
  
  gamma_fbmau_2017[1] ~ dnorm(0.45, 100)I(0.001,1)
  gamma_fbmau_2017[2] ~ dnorm(0.60, 100)I(0.001,1)
  gamma_fbmau_2017[3] ~ dnorm(0.75, 100)I(0.001,)
  gamma_fbmau_2017[4] ~ dnorm(1.15, 100)I(0.001,)
  
  gamma_fbmau_2018[1] ~ dnorm(0.55, 100)I(0.001,1)
  gamma_fbmau_2018[2] ~ dnorm(0.70, 100)I(0.001,1)
  gamma_fbmau_2018[3] ~ dnorm(0.85, 100)I(0.001,)
  gamma_fbmau_2018[4] ~ dnorm(1.05, 100)I(0.001,)
  gamma_fbmau_2018[5] ~ dnorm(1.50, 100)I(0.001,)
  
  gamma_fbmau_2019[1] ~ dnorm(0.55, 100)I(0.001,1)
  gamma_fbmau_2019[2] ~ dnorm(0.70, 100)I(0.001,1)
  gamma_fbmau_2019[3] ~ dnorm(0.85, 100)I(0.001,)
  gamma_fbmau_2019[4] ~ dnorm(1.00, 100)I(0.001,)
  gamma_fbmau_2019[5] ~ dnorm(1.40, 100)I(0.001,)
   
  gamma_fbdau_2018[1] ~ dnorm(0.35, 100)I(0.001,1)
  gamma_fbdau_2018[2] ~ dnorm(0.50, 100)I(0.001,1)
  gamma_fbdau_2018[3] ~ dnorm(0.65, 100)I(0.001,)
  gamma_fbdau_2018[4] ~ dnorm(0.85, 100)I(0.001,)
  gamma_fbdau_2018[5] ~ dnorm(1.10, 100)I(0.001,)
  
  gamma_fbdau_2019[1] ~ dnorm(0.35, 100)I(0.001,1)
  gamma_fbdau_2019[2] ~ dnorm(0.50, 100)I(0.001,1)
  gamma_fbdau_2019[3] ~ dnorm(0.65, 100)I(0.001,)
  gamma_fbdau_2019[4] ~ dnorm(0.85, 100)I(0.001,)
  gamma_fbdau_2019[5] ~ dnorm(1.05, 100)I(0.001,)
 
  
  
  # 2019 scaling factor
  for(i in infbmau2019){
  kappa_fbmau_2019[i] ~ dnorm(scale_fbmau[i], 100)I(0.0001,)
  }
  for(i in infbdau2019){
  kappa_fbdau_2019[i] ~ dnorm(scale_fbdau[i], 100)I(0.0001,)
  }
 
  
  
} 
